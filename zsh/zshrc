# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
  export ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load. Optionally, if you set this to "random"
# it'll load a random theme each time that oh-my-zsh is loaded.
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
  autopep8
  colorize
  copybuffer
  copydir
  copyfile
  extract
  history-substring-search
  jsontools
  python
  pylint
  textastic
  tmux
)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
alias pyut_d="python -m unittest discover"
alias g="git"
alias gg="go_git"
alias lc="lazy_commit"
alias go_grade="echo -e 'Going to grade on the linux host for PSU CS...'; ssh linux -t 'cd grading-folder; bash'" 
alias supg="sudo apt-get update && sudo apt-get upgrade"

# add paths
source ~/paths.sh

export EDITOR=vim
export VISUAL="$EDITOR"

## BEGIN FUNCTIONS
# make dir and enter it
mkcd () {
  mkdir "$1"
  cd "$1"
}

go_git () {
  cd $GIT_HOME
  cd "$*"
}

sib () {
  cd "../$1"
}

# do a daily
do_daily () {
  mkcd "$GIT_HOME/dailies"
  mkdir "$1"
  cd "$1"
  git init
}

# lazy add and commit with message
lazy_commit () {
  git add .
  git commit -m "$*"
}

extract_here () {
  ARCHIVE="$1"
  NAME="${2:-"${ARCHIVE%%.*}"}"
  # extract the archive to a folder
  echo "Extracting archive $ARCHIVE..."
  if [[ "$ARCHIVE" =~ \.zip$ ]]; then
    unzip "$ARCHIVE" -d "$NAME"
  elif [[ "$ARCHIVE" =~ \.tar || $"$ARCHIVE" =~ \.gz$ || "$ARCHIVE" =~ \.tgz || "$ARCHIVE" =~ \.bz2$ ]]; then
    tar xvf "$ARCHIVE" -C "$NAME"
  elif [[ "$ARCHIVE" =~ \.rar$ ]]; then
    unrar e "$ARCHIVE" "$NAME"
  else
    echo -e "Archive format of \"$ARCHIVE\" not recognized. \nMust be a zip, tar, bz2, or gz."
    rm -d "$NAME"
  fi
}

view_tex () {
  if [[ ! $1 =~ .tex$ ]] || [ ! -f "$1" ]; then
    >&2 echo "view_tex [.tex file]"
    return 1
  fi
  pdflatex "$1"
  evince "${1/\.tex/.pdf}"
}

# completions
# tex functions
compdef '_files -g "*.tex"' cztcheck view_tex
compdef '_path_files -/ -W $(dirname $PWD)' sib
compdef '_path_files -/ -W $GIT_HOME' go_git gg
# go_git
_go_git(){
  _complete_in_folder "$GIT_HOME"
}

# xclip to clipboard function
xclip-cb () {
  xclip -selection clipboard -i $@
}

# opening a subshell for testing something
wonder () {
  f=${1:-`mktemp -d`}

  # open subshell
  bash --rcfile <(
  echo "mkdir -p "$f" || rm -rf "$f/";
  cd "$f";
  PS1='testing subshell $ ';"
  ) -i
  rm -rf "$f" # clean up
}

# clone something from github
gh () {
  if [[ -z "$1" ]]; then
    >&2 echo -e "Usage: \tgh [repo] [folder]\n\t[repo] can be a fully qualified name, or the short name\n\t[folder] is optional"
    return 1
  fi

  local prefix='git@github.com:'

  # clone based on arguments
  if [[ -z "$2" ]] && [[ "$1" =~ : ]]; then
    git clone $prefix"$1"
  elif [[ ! -z "$2" ]] && [[ ! "$1" =~ : ]]; then
    git clone $prefix"$1"
  elif [[ -z "$2" ]] && [[ ! "$1" =~ : ]]; then
    git clone $prefix"$1"
  else
    git clone $prefix"$1" "$2"
  fi
}

# strip prefixes from
# filenames in the current directory
strip_prefix() {
  # requires prefix to strip
  [[ -z "$1" ]] && exit 1

  for file in *;
    do mv "$file" "${file#"$1"}";
  done
}
