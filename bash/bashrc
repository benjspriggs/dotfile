# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
  *i*) ;;
  *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
  debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
  xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
  if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    # We have color support; assume it's compliant with Ecma-48
    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
    # a case would tend to support setf rather than setaf.)
    color_prompt=yes
  else
    color_prompt=
  fi
fi

if [ "$color_prompt" = yes ]; then
  PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
  PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
  xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
  *)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
  test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
  alias ls='ls --color=auto'
  #alias dir='dir --color=auto'
  #alias vdir='vdir --color=auto'

  alias grep='grep --color=auto'
  alias fgrep='fgrep --color=auto'
  alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
  . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# author::Benjamin Spriggs

export EDITOR=vim
export VISUAL="$EDITOR"

# make dir and enter it
mkcd () {
  mkdir "$1"
  cd "$1"
}

go_git () {
  cd $GIT_HOME
  cd "$*"
}

sib () {
  cd "../$1"
}

# do a daily
do_daily () {
  mkcd "$GIT_HOME/dailies"
  mkdir "$1"
  cd "$1"
  git init
}

# lazy add and commit with message
lazy_commit () {
  git add .
  git commit -m "$*"
}

extract_here () {
  ARCHIVE="$1"
  NAME="${2:-"${ARCHIVE%%.*}"}"
  # extract the archive to a folder
  echo "Extracting archive $ARCHIVE..."
  if [[ "$ARCHIVE" =~ \.zip$ ]]; then
    unzip "$ARCHIVE" -d "$NAME"
  elif [[ "$ARCHIVE" =~ \.tar || $"$ARCHIVE" =~ \.gz$ || "$ARCHIVE" =~ \.tgz || "$ARCHIVE" =~ \.bz2$ ]]; then
    tar xvf "$ARCHIVE" -C "$NAME"
  elif [[ "$ARCHIVE" =~ \.rar$ ]]; then
    unrar e "$ARCHIVE" "$NAME"
  else
    echo -e "Archive format of \"$ARCHIVE\" not recognized. \nMust be a zip, tar, bz2, or gz."
    rm -d "$NAME"
  fi
}

view_tex () {
  if [[ ! $1 =~ .tex$ ]] || [ ! -f "$1" ]; then
    >&2 echo "view_tex [.tex file]"
    return 1
  fi
  pdflatex "$1"
  evince "${1/\.tex/\.pdf}"
}

# completions
# czt Z syntax checker
compgen -f -X '!*.tex' cztcheck
# tex functions
compgen -f -X '!*.tex' view_tex
# sib
compgen -W "$(ls ..)" sib

# xclip to clipboard function
xclip-cb () {
  xclip -selection clipboard -i $@
}

# add paths
source ~/paths.sh

# opening a subshell for testing something
wonder () {
  f=${1:-`mktemp -d`}

  # open subshell
  bash --rcfile <(
  echo "mkdir -p "$f" || rm -rf "$f/";
  cd "$f";
  PS1='testing subshell $ ';"
  ) -i
  rm -rf "$f" # clean up
}

# clone something from github
gh () {
  if [[ -z "$1" ]]; then
    >&2 echo -e "Usage: \tgh [repo] [folder]\n\t[repo] can be a fully qualified name, or the short name\n\t[folder] is optional"
    return 1
  fi

  local default_prefix='git@github.com:'

  # clone based on arguments
  if [[ -z "$2" ]] && [[ "$1" =~ : ]]; then
    git clone $default_prefix"$1"
  elif [[ ! -z "$2" ]] && [[ ! "$1" =~ : ]]; then
    git clone https://github.com/"$1"
  elif [[ -z "$2" ]] && [[ ! "$1" =~ : ]]; then
    git clone https://github.com/"$1"
  else
    git clone https://github.com/"$1" "$2"
  fi
}

# strip prefixes from
# filenames in the current directory
strip_prefix() {
  # requires prefix to strip
  [[ -z "$1" ]] && exit 1

  for file in *;
    do mv "$file" "${file#"$1"}";
  done
}
